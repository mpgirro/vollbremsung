#!/usr/bin/env ruby
# -*- encoding : utf-8 -*-

require 'mkmf' # part of stdlib
require 'open3'
require 'json'
require 'optparse'
require 'handbrake'
require 'vollbremsung'





# square brackets have a special meaning in the context of shell globbing
# --> escape them in order to find files in directories with [, ], {, }
# symbols in their path
def escape_glob(s)
  s.gsub(/[\\\{\}\[\]\*\?]/) { |x| "\\"+x }
end

options = {
    :extension => "m4v",
    :match_list => Vollbremsung::CONVERT_TYPES
}

OptionParser.new do |opts|
  opts.banner = Vollbremsung::USAGE
  opts.separator ""
  opts.separator "vollbremsung is a HandbrakeCLI bulk encoding tool."
  opts.separator "If <target> is a file, it will be processed by Handbrake"
  opts.separator "using a modified version of the default preset which will"
  opts.separator "take all audio and subtitle tracks in their order of appearence"
  opts.separator "(Handbrake default takes only the first)"
  opts.separator ""
  opts.separator "If <target> is a directory, all files with one of the file"
  opts.separator "extensions [ #{Vollbremsung::CONVERT_TYPES.join(' | ')} ] will be"
  opts.separator "be processed. See the following options for additional actions."
  opts.separator ""

  opts.on("-d", "--delete", "Delete source files after successful encoding") do |flag|
    options[:delete]  = true
  end

  opts.on("--list-only", "List matching files only. Do not run processing") do |flag|
    options[:list_only]  = true
  end

  opts.on("--match ext1,ext2,ext3", String, "Match only specific file extensions") do |es|
      options[:match_list] = es.split(',')
  end

  opts.on("--mp4-ext", "Use 'mp4' as file extension instead of 'm4v'") do |flag|
    options[:extension] = "mp4"
  end

  opts.on("-m", "--move", "Move source files to <FILENAME>.old after encoding") do |flag|
    options[:move] = true
  end

  opts.on("-r", "--recursive", "Process subdirectories recursively as well") do |flag|
    options[:recursive] = true
  end

  opts.on("-t", "--title", "Set the MP4 metadata title tag to the filename") do |flag|
    options[:title] = true
  end

  opts.on("--x264-preset PRESET", String, "Set the x264-preset. Default is: #{Vollbremsung::X264_DEFAULT_PRESET}") do |preset|
    options[:x264_preset] = preset
  end

  opts.on("--version", "Show program version information") do
    options[:version]  = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse! # do the parsing. do it now!


if options[:version]
  puts "vollbremsung version #{Vollbremsung::VERSION}"
  exit
end


options[:x264_preset] = Vollbremsung::X264_DEFAULT_PRESET if options[:x264_preset].nil?


if ARGV[0].nil?
  puts "No target provided."
  puts Vollbremsung::USAGE
  exit 1
end

#TARGET_PATH = ARGV[0]

ARGV.each do |target|
  unless File.exists?(target)
    puts "The target #{target} does not exist."
    exit 1
  end
end

if options[:move] && options[:delete]
  puts "--delete (-d) and --move (-m) are mutually exclusive - choose one!"
  puts "It is not possible to delete and move the source files at the same time."
  exit 1
end

# probe for required executable
# only do this if not in list-only mode
unless options[:list_only]
  unless find_executable('HandbrakeCLI') || find_executable('HandBrakeCLI')
    puts "It seems you do not have HandbrakeCLI installed or it is not available in your $PATH."
    puts "You can get the executable from http://handbrake.fr/downloads.php"

    File.delete 'mkmf.log' if File.exists?('mkmf.log') # find_executable seems to create such file in case executable is not found
    exit 1
  end

  unless find_executable 'ffprobe'
    puts "It seems you do not have ffprobe installed or it is not available in your $PATH."
    puts "ffprobe is part of ffmpeg. Install it for your system and run again."

    File.delete 'mkmf.log' if File.exists?('mkmf.log') # find_executable seems to create such file in case executable is not found
    exit 1
  end

  File.delete 'mkmf.log' if File.exists?('mkmf.log') # find_executable seems to create such file in case executable is not found
end


#HANDBRAKE_OPTIONS = "--encoder x264 --quality 20.0 --aencode faac -B 160 --mixdown dpl2 --arate Auto -D 0.0 --format mp4 --markers --audio-copy-mask aac,ac3,dtshd,dts,mp3 --audio-fallback ffac3 --x264-preset veryfast --loose-anamorphic --modulus 2"

items = Vollbremsung.crawl(ARGV, options[:recursive])

exit if options[:list_only]

items.each do |infile, target_dir|

  metadata = Vollbremsung.ffprobe(infile)
  if metadata.nil?
    Vollbremsung.log "ERROR retrieving metadata -- skipping this file"
    next
  end

  astreams, sstreams = Vollbremsung.parse_metadata(metadata)
  outfile, infile_relative_path = Vollbremsung.full_outpath(infile)

  Vollbremsung.log "processing: #{infile_relative_path}"

  success = Vollbremsung.convert(infile,outfile,astreams,sstreams,options[:x264_preset])

  if success
    infile_size = File.size(infile)
    outfile_size = File.size(outfile)

    Vollbremsung.log "compression ratio: %.2f" % (outfile_size.to_f / infile_size.to_f)

    if options[:title]
      write_mp4_title(infile, outfile)
    end # if options[:title]

    if options[:move]
      Vollbremsung.log "moving source file to *.old"
      File.rename(infile, "#{infile}.old") rescue log "ERROR: renaming source file"
    elsif options[:delete]
      Vollbremsung.log "deleting source file"
      File.delete(infile) rescue log "ERROR: deleting source file"
    end

  end # if success
end # target_files.each

if target_files.empty?
  Vollbremsung.log "nothing to do"
else
  Vollbremsung.log "all items processed"
end
